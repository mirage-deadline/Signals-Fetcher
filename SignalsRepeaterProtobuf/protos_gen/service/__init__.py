# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ideas.proto, notification_sender.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import common as _common__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class CollectorStub(betterproto.ServiceStub):
    async def get_ideas(
        self,
        common_fetched_ideas_transaction: "_common__.FetchedIdeasTransaction",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_common__.Empty":
        return await self._unary_unary(
            "/service.Collector/GetIdeas",
            common_fetched_ideas_transaction,
            _common__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_traders(
        self,
        common_fetched_traders_transaction: "_common__.FetchedTradersTransaction",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_common__.Empty":
        return await self._unary_unary(
            "/service.Collector/GetTraders",
            common_fetched_traders_transaction,
            _common__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class NotificationSenderStub(betterproto.ServiceStub):
    async def get_ideas(
        self,
        common_fetched_ideas_transaction: "_common__.FetchedIdeasTransaction",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_common__.Empty":
        return await self._unary_unary(
            "/service.NotificationSender/GetIdeas",
            common_fetched_ideas_transaction,
            _common__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CollectorBase(ServiceBase):
    async def get_ideas(
        self, common_fetched_ideas_transaction: "_common__.FetchedIdeasTransaction"
    ) -> "_common__.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_traders(
        self, common_fetched_traders_transaction: "_common__.FetchedTradersTransaction"
    ) -> "_common__.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_ideas(
        self,
        stream: "grpclib.server.Stream[_common__.FetchedIdeasTransaction, _common__.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_ideas(request)
        await stream.send_message(response)

    async def __rpc_get_traders(
        self,
        stream: "grpclib.server.Stream[_common__.FetchedTradersTransaction, _common__.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_traders(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/service.Collector/GetIdeas": grpclib.const.Handler(
                self.__rpc_get_ideas,
                grpclib.const.Cardinality.UNARY_UNARY,
                _common__.FetchedIdeasTransaction,
                _common__.Empty,
            ),
            "/service.Collector/GetTraders": grpclib.const.Handler(
                self.__rpc_get_traders,
                grpclib.const.Cardinality.UNARY_UNARY,
                _common__.FetchedTradersTransaction,
                _common__.Empty,
            ),
        }


class NotificationSenderBase(ServiceBase):
    async def get_ideas(
        self, common_fetched_ideas_transaction: "_common__.FetchedIdeasTransaction"
    ) -> "_common__.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_ideas(
        self,
        stream: "grpclib.server.Stream[_common__.FetchedIdeasTransaction, _common__.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_ideas(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/service.NotificationSender/GetIdeas": grpclib.const.Handler(
                self.__rpc_get_ideas,
                grpclib.const.Cardinality.UNARY_UNARY,
                _common__.FetchedIdeasTransaction,
                _common__.Empty,
            ),
        }
